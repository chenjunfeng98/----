开放封闭原则(O)
软件实体（模块、类、函数等）应该可以扩展，但是不可以修改。也就是说软件对扩展开放，对修改关闭。需要说明的是，对修改关闭不是说软件设计不能做修改，只是尽量不要做不必要的修改。
单一职责原则(S)(一个类的功能要尽可能单一，不要太杂)

1、一个类或者模块只负责完成一个职责，如果功能特别复杂就进行拆分;
2、单一职责可以降低类的复杂性，提高代码可读性、降低类/模块之间的耦合性;
3、当类代码行数/方法/功能过多，就需要对类进行拆分;
4、拆分不能过度，如果拆分过度会损失内聚性
例子：父母和爷奶的生活范围

里式替换原则(L)
1、所有引用基类的地方必须能透明地使用子类的对象;
2、子类能替换掉父类，使用者可能根本就不需要知道是父类还是子类，反之则不行;
3、里式替换原则是开闭原则的实现基础，程序设计的时候尽量使用基类定义及引用，运行时再决定使用哪个子类;
4、子类如果违反了父类的功能则表示违反了里式替换原则;
例子：
//里式替换可以替换，任何可以传父类的地方，都可以把子类传进去,要求子类不能违反父类的功能(返回的数据类型....)
class Drink {
	getPrice(){
	    return 1
	}
  }


class CocaCola extends Drink {
	getPrice(){
	     return 3
	}
  }


class Customer {
	drink(父类/抽象类){
	console.log(父类.getPrice())	
	}
}


依赖倒置原则(D)(依赖抽象，而非依赖具体的实现)
//类似里式替换原则(强调子类不能修改父类的行为)
1、面向接口编程，依赖于抽象而不依赖于具体实现;
2、使用方只关注接口而不关注具体类的实现;

接口隔离原则(I)(不同功能类独立成不同的接口，而不是不同功能的接口都柔和到一个类中)
1、保持接口的单一独立，避免出现胖接口;
2、接口尽量细化，接口中的方法尽量的少;
3、类似于单一职责原则，更关注接口;





寄生组合式继承
function sup(name){
  this.name = name
}

sup.prototype.hello = function(){
  console.log('hello'+this.name)
}

function sub(name,age){
  sup.call(this,name)
  this.age = age
}

sub.prototype = Object.create(sup.prototype);
sub.prototype.constructor = sub;

sub.prototype.say = function(){
  console.log('hello')
}

let s1 = new sub('xiaoming',18)
console.log(s1.name);

s1.say()